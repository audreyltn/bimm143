---
title: "Class 8 Mini Project: Unsupervised Learning Analysis of Human Breast Cancer Cells"
author: "Audrey Nguyen"
format: gfm
---

## Data import
We first have to download and import our data correctly into our R session.
We can use the `read.csv()` function to read the CSV (comma-separated values) file containing the data (avaliable from our class website). 

```{r}
# Save your input data file into your Project directory 
fna.data <- "WisconsinCancer.csv"
wisc.df <- read.csv(fna.data, row.names = 1)
```

Examine your input data to ensure column names are set correctly.

```{r}
head(wisc.df)
```

We need to take out the first column `wisc.df$diagnosis` because it has the "answer". We don't want to include this in our analysis. We need to create a new data.frame that omits this first column.

```{r}
# We can use -1 here to remove the first column
wisc.data <- wisc.df[, -1]
```

Setup a new separate vector called `diagnosis` that contains the data from the diagnosis column of the original dataset. We will store this as a *factor* (useful for plotting) and use this later to check our results.

```{r}
# Create diagnosis vector for later
diagnosis <- as.factor(wisc.df[, 1])
```

## Exploratory data analysis

> Q1. How many observations are in this dataset?

```{r}
nrow(wisc.data)
```
There are 569 observations in this dataset.

> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```

> Q3. How many variables/features in the data are suffixed with `_mean`?

First find the column names.
```{r}
colnames(wisc.data)
```

Next I need to search within the column names for "_mean" pattern. The `grep()` function might help us.

```{r}
inds <- grep("_mean", colnames(wisc.data))
length(inds)
```

> Q. How many dimensions are in this dataset?

```{r}
ncol(wisc.data)
```

# Principal Component Analysis
## Performing PCA

It's important to check if the data needs to be scaled before performing PCA, because the input variables might use different units of measurement or have significantly different variances. 
```{r}
# Check column means and standard devations
colMeans(wisc.data)
round(apply(wisc.data, 2, sd), 3)
```

Execute PCA with the `prcomp()` function on the `wisc.data`, scaling if appropriate, and assign the output model to `wisc.pr`. It also looks like we need to scale the data. 

```{r}
wisc.pr <- prcomp(wisc.data, scale = TRUE)
```

```{r}
# Look at summary of results
summary(wisc.pr)
```

> Q4. From your results, what proportion of the original variance is captures by the first principal components (PC1)?

44.27% 

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3 PCs capture about 72%. 

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 PCs capture about 91%. 

##Interpreting PCA results

Create a biplot of the `wisc.pr` using the `biplot()` function.

```{r}
biplot(wisc.pr)
```

> Q7. What stands out to you about this plot? Is it easy or difficult to understand?

All the points seem to originate from one common place. It's difficult to understand, because it's hard to make out the values. Everything is clustered together. 

Let's generate a more standard scatter plot of each observation along the principal components.

```{r}
# Scatter plot observations by components 1 and 2
plot(wisc.pr$x[, 1], wisc.pr$x[, 2], col = diagnosis, 
     xlab = "PC1", ylab = "PC2")
```

> Q3. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[, 1], wisc.pr$x[, 3], col = diagnosis, 
     xlab = "PC1", ylab = "PC3")
```
There are less overlapping values in the PC1/PC2 plot, compared to the PC1/PC3 plot. 

Let's see if we can use the **ggplot2** package to make a more fancy figure of these results. Remember that ggplot requires a data.frame as input and we will also need to add our `diagnosis` vector as a column if we want to use it for mapping to the plot color aesthetic.

```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```

## Variance explained

Calculate the variance of each principal component by squaring the sdev component of `wisc.pr` (i.e. `wisc.pr$sdev^2`). Save the result as an object called `pr.var`.

```{r}
# Calculate the variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

Calculate the variance explained by each principal component by dividing by the total variance explained of all principal components. Assign this to a variable called `pve` and create a plot of variance explained for each principal component.

```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

OPTIONAL: There are quite a few CRAN packages that are helpful for PCA. This includes the **factoextra** package. Feel free to explore this package. For example:

```{r}
## ggplot based graph
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```

## Communicating PCA results

> Q9. For the first principal component, what is the component of the loading vector (i.e. `wisc.pr$rotation[,1]`) for the feature `concave.points_mean`?

How much do the original variables contribute to the new PCs that we have calculated? Look at the `$rotation` component of the returned PCA object. 

```{r}
wisc.pr$rotation["concave.points_mean", 1]
```

There is a complicated mix of variables that make up PC1. 

```{r}
loadings <- as.data.frame(wisc.pr$rotation)
ggplot(loadings) + 
  aes(PC1, rownames(loadings)) +
  geom_col()
```

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

You need 5 principal components to explain 80% of the variance in the data. 

# Hierarchical clustering

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
```

Calculate the (Euclidean) distances between all pairs of observations in the new scaled data set and assign the result to `data.dist`.

```{r}
data.dist <- dist(data.scaled)
```

Calculate a hierarchical clustering model using complete linkage. Manually specify the method argument to `hclust()` and assign the results to `wisc.hclust`.

```{r}
wisc.hclust <- hclust(data.dist, method = "complete", members = NULL)
```

## Results of hierarchical clustering

> Q11. Using the `plot()` and `abline()` functions, what is the height at which the clustering model has 4 clusters?

```{r}
plot(wisc.hclust)
abline(h = 19, col="red", lty = 2)
```

## Selecting number of clusters 
```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k = 2)
```

```{r}
table(wisc.hclust.clusters, diagnosis)
```

Changing the k value doesn't really have an effect on the accuracy matches. 

I like the `ward.D2` method, because you can quantify the values between the clusters and diagnosis. 

```{r}
d <- dist(wisc.pr$x[, 1:3])
wisc.pr.hclust <- hclust(d, method = "ward.D2")
```

```{r}
plot(wisc.pr.hclust)
```

```{r}
grps <- cutree(wisc.pr.hclust, k = 2)
table(grps)
```

```{r}
table(grps, diagnosis)
```

```{r}
plot(wisc.pr$x[, 1:2], col = grps)
```

```{r}
plot(wisc.pr$x[, 1:2], col = diagnosis)
```

```{r}
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k = 2)
```

```{r}
table(wisc.pr.hclust.clusters, diagnosis)
```

```{r}
(179 + 333)/569
```
The cluster model is about 90% accurate. 


