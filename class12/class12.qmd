---
title: "Class 12: Transcriptomics and the Analysis of RNA-Seq Data"
author: "Audrey Nguyen"
format: gfm
---

# Important countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)
metadata <- read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

There are 38694 genes in this dataset.

> Q2. How many 'control' cell lines do we have?

```{r}
table(metadata$dex)
```
There are 4 'control' cell lines. 

Let's check to see if the id names in metadata match the order of the columns in the countData.

```{r}
metadata$id == colnames(counts)
```

We can use the `all()` function to check that all its inputs are true.
```{r}
all(metadata$id == colnames(counts))
```

Let's extract only the control columns.

```{r}
control.inds <- metadata$dex == "control"
control.ids <- metadata$id[control.inds]
control.counts <- counts[, control.ids]
head(control.counts)
```

I want a single summary counts value for each gene in the control experiments. I will start by taking the average. 

```{r}
# you can also use apply(control.counts, 1, mean)
control.mean <- rowMeans(control.counts)
```

We need to do the same thing to get the `treated.mean`.

```{r}
treated.inds <- metadata$dex == "treated"
treated.ids <- metadata$id[treated.inds]
treated.counts <- counts[, treated.ids]
head(treated.counts)
```

```{r}
treated.mean <- rowMeans(treated.counts)
```

# Toy differential gene expression

This bit of code will first find the sample `id` for those labeled control. It will then calculate the mean counts per gene across the samples.

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean) 
```

An alternative way to do this same thing using the `dplyr` package from the tidyverse is shown below. Which do you prefer and why?

```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

I like using the first method better, because I don't like typing the %>% in dplyr. 

> Q3. How would you make the above code in either approach more robust?

You can use the function `apply()` to include more functions. 

> Q4. Follow the same procedure for the `treated` samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called `treated.mean`) 

See above code for `treated.mean`. 

We will combine our meancount data for bookkeeping purposes.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

`colSums()` the data to show the sum of the mean counts across all genes for each group.

```{r}
colSums(meancounts)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(meancounts$control.mean, meancounts$treated.mean, xlab = "Control", ylab = "Treated")
```

> Q5 (b). You could also use the **ggplot2** pacakge to make this figure producing the plot below. What **geom_?()** function would you use for this plot?

You would use **geom_point()**.

```{r}
library(ggplot2)
ggplot(meancounts, aes(control.mean, treated.mean)) + geom_point()
```

There are too many points around the origin, even though there are 60,000 points. Use a log function to visualize more points. 

> Q6. Try plotting both axes on a log scale. What is the argument to **plot()** that allows you to do this?

```{r}
plot(meancounts$control.mean, meancounts$treated.mean, xlab = "Control", ylab = "Treated", log = "xy")
```

The most useful and most straightforward to understand is log2 transform. 

```{r}
log2(20/20)
```
0 means no change.

Doubling
```{r}
log2(40/20)
```

```{r}
log2(10/20)
```

```{r}
log2(80/20)
```

We can calculate the log2fold change, add it to our `meancounts` data.frame and inspect the results either with the **head()** or the **View()** function.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)
head(meancounts)
```

Let's filter our data to remove the genes with "NaN" (not a number) and -Inf (negative infinity) results.

```{r}
zero.vals <- which(meancounts[, 1:2] == 0, arr.ind = TRUE)

to.rm <- unique(zero.vals[, 1])
mycounts <- meancounts[-to.rm, ]
head(mycounts)
```

> Q7. What is the purpose of the `arr.ind` argument in the **which()** function call above? Why would we then take the first column of the output and need to call the **unique()** function?

The `arr.ind` argument returns the array indices if x is an array. In this case, it returns the zero values. The **unique()** function is used to eliminate or delete the duplicate values or rows present. In this case, it deletes the zero values if it has zero entries in both samples. 

A common threshold used for calling something differentially expressed is a log2(FoldChange) og greater than 2 or less than -2. Let's filter the dataset both ways to see how many genes are up or down-regulated.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

> Q8. Using the `up.ind` vector above can you determine how many upregulated genes we have at the greater than 2 fc level?

```{r}
sum(mycounts$log2fc > +2)
```
There are 250 genes that are greater than 2 fc level.

> Q9. Using the `down.ind` vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(mycounts$log2fc < -2)
```
There are 367 downregulated genes that are greater than 2 fc level. 

> Q10. Do you trust these results? Why or why not?

Not really, because we haven't really seen if these results are statistically significant, based on p-values. 

# DESeq2 analysis

```{r}
#| message: false
library(DESeq2)
citation("DESeq2")
```

## Importing data

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, colData = metadata, design = ~dex)
dds
```

## DESeq analysis

You have to run **DESeq()** before looking at results.

```{r}
dds <- DESeq(dds)
```

## Getting results

```{r}
res <- results(dds)
res
```

```{r}
summary(res)
```

Adjusting the p-value to 0.05. Its default value is 0.1.
```{r}
res05 <- results(dds, alpha = 0.05)
summary(res05)
```

# Adding annotation data

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

The main function we will use from the **AnnotationDbi** package is called **mapIds()**. 
We can use the **mapIds()** function to add individual columns to our results table.

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")                 
```

```{r}
head(res)
```

> Q11. Run the **mapIds()** function 2 more times to add the Entrez ID and UniProt accession and GENENAME a new columsn called `res$entrez`, `res$uniprot`, and `res$genename`. 

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

You can arrange and view the results by the adjusted p-value.

```{r}
ord <- order(res$padj)
#View(res[ord,])
head(res[ord, ])
```

Finally, let's write out the ordered significant results with annotations.

```{r}
write.csv(res[ord, ], "deseq_results.csv")
```

# Data Visualization

## Volcano plots

Volcano plots are frequently used to highlight the proportion of genes that are both significantly regulated and display a high fold change. 

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

We can add some guidelines with the `abline()` function and color (with a custom color vector), highlighting genes that have padj < 0.05 and the absolute log2FoldChange > 2.

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

To color the points we will setup a custom color vector indicating transcripts with large fold change and significant differences between conditions:

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

You can use the **EnhancedVolcano** bioconductor package for more customization. 

```{r}
BiocManager::install("Enhanced Volcano")
```

```{r}
library(EnhancedVolcano)
```

```{r}
x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```

# Pathway analysis

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Running the **gage** pathway analysis:

```{r}
# get the results
keggres = gage(foldchanges, gsets = kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# look at the first three down (less) pathways
head(keggres$less, 3)
```

Let's try out the **pathview()** function from the pathview package to make a pathway plot with our RNA-Seq expression results shown in color. 

```{r}
pathview(gene.data = foldchanges, pathway.id = "hsa05310")
```

![The Asthma pathway with my highlighted differentially expressed genes in color](hsa05310.pathview.png)

