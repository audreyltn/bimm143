---
title: "Class 7: Machine Learning I"
author: "Audrey Nguyen"
format: pdf
---

In this class we will explore clustering and dimensionality reduction methods.

##K-means

Make up some input data where we know what the answer should be. 

```{r}
tmp <- c(rnorm(30, -3), rnorm(30, +3))
x <- cbind(x=tmp, y=rev(tmp))
x
head(x)
```
Quick plot of x to see the two graphs at -3, 3 and +3, -3
```{r}
plot(x)
```

Use the `kmeans()` function setting k to 2 and nstart = 20
```{r}
km <- kmeans(x, centers = 2, nstart = 20)
km
```

> Q. How many points are in each cluster?

```{r}
km$size
```

> Q. What 'component' of your result details 
  - cluster assignment/membership?
  - cluster center?

```{r}
km$cluster
```

```{r}
km$centers
```
> Q. Plot x colored by the kmeans cluster assignment and add cluster centers as blue points

```{r}
plot(x, col = km$cluster)
points(km$centers, col = "blue", pch = 15, cex = 2)
```
Play with kmeans and ask for different number of clusters
```{r}
km <- kmeans(x, centers = 4, nstart = 20)
plot(x, col = km$cluster)
points(km$centers, col = "blue", pch = 16, cex = 2)
```

# Hierarchical Clustering

This is another very useful and widely employed clustering method which has the advantage over k-means in that it can help reveal the something of the true grouping in your data.

The `hclust()` function wants a distance matrix as input. We can get this from the `dist()` function. 

```{r}
d <- dist(x)
hc <- hclust(d)
hc
```

There is a plot message for hclust results:

```{r}
plot(hc)
abline(h = 10, col = "red")
```

To get my cluster membership vector, I need to "cut" my tree to yield sub-trees or branches with all the members of a given cluster residing on the same cut branch. The function to do this is `cutree()`. 

```{r}
groups <- cutree(hc, h = 10)
groups
```

It is often helpful to use the `k = ` argument rather than the `h = ` height of cutting with `cutree()`. This will cut the tree to yield the number of clusters you want. 
```{r}
cutree(hc, k = 4)
```

#Principal Component Analysis (PCA)

The base R function for PCA is called `prcomp()`. 
Let's play with some 17D data ( a very small dataset) and see how PCA can help. 

#PCA of UK food data

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
head(x)
```
> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer these questions?

You can use the `dim()` function to return the number of rows and columns or `nrow()` to get rows and `ncol()` to get columns separately. 

```{r}
dim(x)
nrow(x)
ncol(x)
```

```{r}
## Preview the first 6 rows
head(x)
```

It appears that the row-names are incorrectly set as the first column of our **x** data frame (rather than set as proper row-names). We want 4 columns for the 4 countries instead. We can fix this with the function `rownames()` to the first column and then remove the troublesome first column (with the -1 column index):

```{r}
# Note how the minus indexing works
rownames(x) <- x[, 1]
x <- x[, -1]
head(x)
```

```{r}
# checking the dimensions again
dim(x)
```

An alternative approach to setting the correct row-names in this case would be to read the data file again and set the `row.names` argument of `read.csv()` to be the 1st column.

```{r}
x <- read.csv(url, row.names = 1)
head(x)
```

> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances? 

I prefer the 2nd approach, because it's more concise. The 2nd approach is more robust, because it can be run multiple times without messing up the dimensions. 

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```
> Q3. Changing what optional argument in the above barplot() function results in the following plot (bars are stacked on each other)?

Setting `beside=FALSE` in the `barplot()` code would stack the bars. 
```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

> Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

```{r}
pairs(x, col = rainbow(10), pch = 16)
```

You can compare the countries from switching the axes based on which pair you're looking at. Given points on the diagonal means that they're the same value as the other food categories from other countries. 

> Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

Comparing to other countries, there are less points on the diagonal, which means that N. Ireland has more distinct values for the food categories.

```{r}
# Use the prcomp() PCA function
pca <- prcomp(t(x))
summary(pca)
```

A "PCA plot" (a.k.a "Score plot", PC1vsPC2 plot, etc.)

```{r}
pca$x
```

```{r}
plot(pca$x[, 1], pca$x[, 2], col = c("orange", "red", "blue", "darkgreen"), pch = 15)
```

> Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

```{r}
# Plot PC1 vs PC2
plot(pca$x[, 1], pca$x[, 2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
```

> Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(pca$x[, 1], pca$x[, 2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], col = c("orange", "red", "blue", "darkgreen"), colnames(x))
```

Below we can use the square of pca$sdev , which stands for “standard deviation”, to calculate how much variation in the original data each PC accounts for.

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v
```

```{r}
## or the second row here...
z <- summary(pca)
z$importance
```

This information can be summarized in a plot of the variances (eigenvalues) with respect to the principal component number (eigenvector number), which is given below.

```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")
```

```{r}
## Lets focus on PC1 as it accounts for > 90% of variance 
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```

